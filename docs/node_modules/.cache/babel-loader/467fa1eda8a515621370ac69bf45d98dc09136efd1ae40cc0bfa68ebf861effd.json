{"ast":null,"code":"import*as iris from'./iris';import*as titanic from'./titanic';const datasets={iris:iris,titanic:titanic};let currentDataset='iris';export function setMockDataset(key){if(datasets[key])currentDataset=key;}export function getAvailableDatasets(){return[{key:'iris',label:'Iris Demo Data'},{key:'titanic',label:'Titanic Demo Data'}];}export function uploadCsv(){const data=datasets[currentDataset];return Promise.resolve({columns:Object.keys(data[`${currentDataset}Raw`][0]),preview:data[`${currentDataset}Raw`].slice(0,5),summary:data[`${currentDataset}Summary`],missing:data[`${currentDataset}Missing`]});}export function visualize(){const data=datasets[currentDataset];return Promise.resolve(data[`${currentDataset}VizBar`]);}export function trainModel(){const data=datasets[currentDataset];return Promise.resolve(data[`${currentDataset}ModelResults`]);}export function explainModel(){const data=datasets[currentDataset];return Promise.resolve(data[`${currentDataset}Explain`]);}let commentsSession={iris:[...iris.irisComments],titanic:[...titanic.titanicComments]};export function getComments(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let all=commentsSession[currentDataset];return Promise.resolve(context?all.filter(c=>c.context===context):all);}export function addComment(_ref){let{user,context,text}=_ref;const newComment={id:Date.now(),user,context,text,timestamp:new Date().toISOString()};commentsSession[currentDataset].push(newComment);return Promise.resolve(newComment);}","map":{"version":3,"names":["iris","titanic","datasets","currentDataset","setMockDataset","key","getAvailableDatasets","label","uploadCsv","data","Promise","resolve","columns","Object","keys","preview","slice","summary","missing","visualize","trainModel","explainModel","commentsSession","irisComments","titanicComments","getComments","context","arguments","length","undefined","all","filter","c","addComment","_ref","user","text","newComment","id","Date","now","timestamp","toISOString","push"],"sources":["/Users/andrewmusa/Documents/Projects/InsightFlow/Untitled/InsightFlow/docs/src/mockData/mockApi.js"],"sourcesContent":["import * as iris from './iris';\nimport * as titanic from './titanic';\n\nconst datasets = {\n  iris: iris,\n  titanic: titanic\n};\n\nlet currentDataset = 'iris';\n\nexport function setMockDataset(key) {\n  if (datasets[key]) currentDataset = key;\n}\n\nexport function getAvailableDatasets() {\n  return [\n    { key: 'iris', label: 'Iris Demo Data' },\n    { key: 'titanic', label: 'Titanic Demo Data' }\n  ];\n}\n\nexport function uploadCsv() {\n  const data = datasets[currentDataset];\n  return Promise.resolve({\n    columns: Object.keys(data[`${currentDataset}Raw`][0]),\n    preview: data[`${currentDataset}Raw`].slice(0, 5),\n    summary: data[`${currentDataset}Summary`],\n    missing: data[`${currentDataset}Missing`]\n  });\n}\n\nexport function visualize() {\n  const data = datasets[currentDataset];\n  return Promise.resolve(data[`${currentDataset}VizBar`]);\n}\n\nexport function trainModel() {\n  const data = datasets[currentDataset];\n  return Promise.resolve(data[`${currentDataset}ModelResults`]);\n}\n\nexport function explainModel() {\n  const data = datasets[currentDataset];\n  return Promise.resolve(data[`${currentDataset}Explain`]);\n}\n\nlet commentsSession = {\n  iris: [...iris.irisComments],\n  titanic: [...titanic.titanicComments]\n};\n\nexport function getComments(context = null) {\n  let all = commentsSession[currentDataset];\n  return Promise.resolve(\n    context ? all.filter(c => c.context === context) : all\n  );\n}\n\nexport function addComment({ user, context, text }) {\n  const newComment = {\n    id: Date.now(),\n    user,\n    context,\n    text,\n    timestamp: new Date().toISOString()\n  };\n  commentsSession[currentDataset].push(newComment);\n  return Promise.resolve(newComment);\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,IAAI,KAAM,QAAQ,CAC9B,MAAO,GAAK,CAAAC,OAAO,KAAM,WAAW,CAEpC,KAAM,CAAAC,QAAQ,CAAG,CACfF,IAAI,CAAEA,IAAI,CACVC,OAAO,CAAEA,OACX,CAAC,CAED,GAAI,CAAAE,cAAc,CAAG,MAAM,CAE3B,MAAO,SAAS,CAAAC,cAAcA,CAACC,GAAG,CAAE,CAClC,GAAIH,QAAQ,CAACG,GAAG,CAAC,CAAEF,cAAc,CAAGE,GAAG,CACzC,CAEA,MAAO,SAAS,CAAAC,oBAAoBA,CAAA,CAAG,CACrC,MAAO,CACL,CAAED,GAAG,CAAE,MAAM,CAAEE,KAAK,CAAE,gBAAiB,CAAC,CACxC,CAAEF,GAAG,CAAE,SAAS,CAAEE,KAAK,CAAE,mBAAoB,CAAC,CAC/C,CACH,CAEA,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAG,CAC1B,KAAM,CAAAC,IAAI,CAAGP,QAAQ,CAACC,cAAc,CAAC,CACrC,MAAO,CAAAO,OAAO,CAACC,OAAO,CAAC,CACrBC,OAAO,CAAEC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,GAAGN,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACrDY,OAAO,CAAEN,IAAI,CAAC,GAAGN,cAAc,KAAK,CAAC,CAACa,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CACjDC,OAAO,CAAER,IAAI,CAAC,GAAGN,cAAc,SAAS,CAAC,CACzCe,OAAO,CAAET,IAAI,CAAC,GAAGN,cAAc,SAAS,CAC1C,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAgB,SAASA,CAAA,CAAG,CAC1B,KAAM,CAAAV,IAAI,CAAGP,QAAQ,CAACC,cAAc,CAAC,CACrC,MAAO,CAAAO,OAAO,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGN,cAAc,QAAQ,CAAC,CAAC,CACzD,CAEA,MAAO,SAAS,CAAAiB,UAAUA,CAAA,CAAG,CAC3B,KAAM,CAAAX,IAAI,CAAGP,QAAQ,CAACC,cAAc,CAAC,CACrC,MAAO,CAAAO,OAAO,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGN,cAAc,cAAc,CAAC,CAAC,CAC/D,CAEA,MAAO,SAAS,CAAAkB,YAAYA,CAAA,CAAG,CAC7B,KAAM,CAAAZ,IAAI,CAAGP,QAAQ,CAACC,cAAc,CAAC,CACrC,MAAO,CAAAO,OAAO,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGN,cAAc,SAAS,CAAC,CAAC,CAC1D,CAEA,GAAI,CAAAmB,eAAe,CAAG,CACpBtB,IAAI,CAAE,CAAC,GAAGA,IAAI,CAACuB,YAAY,CAAC,CAC5BtB,OAAO,CAAE,CAAC,GAAGA,OAAO,CAACuB,eAAe,CACtC,CAAC,CAED,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAAiB,IAAhB,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACxC,GAAI,CAAAG,GAAG,CAAGR,eAAe,CAACnB,cAAc,CAAC,CACzC,MAAO,CAAAO,OAAO,CAACC,OAAO,CACpBe,OAAO,CAAGI,GAAG,CAACC,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACN,OAAO,GAAKA,OAAO,CAAC,CAAGI,GACrD,CAAC,CACH,CAEA,MAAO,SAAS,CAAAG,UAAUA,CAAAC,IAAA,CAA0B,IAAzB,CAAEC,IAAI,CAAET,OAAO,CAAEU,IAAK,CAAC,CAAAF,IAAA,CAChD,KAAM,CAAAG,UAAU,CAAG,CACjBC,EAAE,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACdL,IAAI,CACJT,OAAO,CACPU,IAAI,CACJK,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CACpC,CAAC,CACDpB,eAAe,CAACnB,cAAc,CAAC,CAACwC,IAAI,CAACN,UAAU,CAAC,CAChD,MAAO,CAAA3B,OAAO,CAACC,OAAO,CAAC0B,UAAU,CAAC,CACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}